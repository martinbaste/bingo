{"version":3,"sources":["components/ListItem.jsx","components/BingoList.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","_this2","activeClass","react_default","a","createElement","className","concat","onClick","setState","text","React","Component","BingoList","listItems","optionList","map","i","components_ListItem","style","width","arr","size","temp","index","shuffled","slice","length","Math","floor","random","getRandomSubarray","App","components_BingoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAqBeA,qBAjBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,OAAQT,EAAMS,QAFZR,wEAKV,IAAAS,EAAAN,KACHO,EAAc,GAIlB,OAHIP,KAAKI,MAAMC,SACbE,EAAc,WAETC,EAAAC,EAAAC,cAAA,MACLC,UAAS,kBAAAC,OAAoBL,GAC7BM,QAAS,kBAAMP,EAAKQ,SAAS,CAAET,QAAUC,EAAKF,MAAMC,WACpDL,KAAKJ,MAAMmB,aAdMC,IAAMC,YCYdC,MAZf,SAAmBtB,GACjB,IAAMuB,EAAYvB,EAAMwB,WAAWC,IAAI,SAACC,GAAD,OAAOd,EAAAC,EAAAC,cAACa,EAAD,CAAUlB,QAAQ,EAAOU,KAAMO,MAC7E,OAAOd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,MAAO,CAACC,MAAM,SACzCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACXQ,KCMP,IAyBMC,EApCN,SAA2BM,EAAKC,GAE9B,IADA,IAA6CC,EAAMC,EAA/CC,EAAWJ,EAAIK,MAAM,GAAIT,EAAII,EAAIM,OAC9BV,KAEHM,EAAOE,EADPD,EAAQI,KAAKC,OAAOZ,EAAI,GAAKW,KAAKE,WAElCL,EAASD,GAASC,EAASR,GAC3BQ,EAASR,GAAKM,EAElB,OAAOE,EAASC,MAAM,EAAGJ,GA4BRS,CAzBM,CACvB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAGsB,IAcTC,mLARX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAWlB,WAAYA,YAJbH,aC/BEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.972a5e98.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass ListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { active: props.active };\r\n  }\r\n\r\n  render() {\r\n    let activeClass = \"\";\r\n    if (this.state.active) {\r\n      activeClass = \" active\"\r\n    }\r\n    return <li \r\n      className={`list-group-item${activeClass}`}\r\n      onClick={() => this.setState({ active : !this.state.active })}\r\n    >{this.props.text}</li>\r\n  }\r\n}\r\n\r\nexport default ListItem","import React from 'react';\r\nimport ListItem from './ListItem.jsx';\r\n\r\nfunction BingoList(props) {\r\n  const listItems = props.optionList.map((i) => <ListItem active={false} text={i}/>)\r\n  return <div className=\"card\" style={{width:\"100%\"}}>\r\n    <div className=\"card-header\">\r\n    LA CENA\r\n    </div>\r\n    <ul className=\"list-group list-group-flush\">\r\n      {listItems}\r\n    </ul>\r\n  </div>\r\n}\r\n\r\nexport default BingoList","import React, { Component } from 'react';\nimport './App.css';\nimport BingoList from './components/BingoList';\n\n\nfunction getRandomSubarray(arr, size) {\n  var shuffled = arr.slice(0), i = arr.length, temp, index;\n  while (i--) {\n      index = Math.floor((i + 1) * Math.random());\n      temp = shuffled[index];\n      shuffled[index] = shuffled[i];\n      shuffled[i] = temp;\n  }\n  return shuffled.slice(0, size);\n}\n\nconst optionMasterList = [\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20\n];\n\nconst bingoNumOptions = 10;\n\nconst optionList = getRandomSubarray(optionMasterList, bingoNumOptions);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BingoList optionList={optionList}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}